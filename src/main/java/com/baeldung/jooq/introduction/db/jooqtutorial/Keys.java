/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.jooqtutorial;


import com.baeldung.jooq.introduction.db.jooqtutorial.tables.Author;
import com.baeldung.jooq.introduction.db.jooqtutorial.tables.AuthorBook;
import com.baeldung.jooq.introduction.db.jooqtutorial.tables.Book;
import com.baeldung.jooq.introduction.db.jooqtutorial.tables.records.AuthorBookRecord;
import com.baeldung.jooq.introduction.db.jooqtutorial.tables.records.AuthorRecord;
import com.baeldung.jooq.introduction.db.jooqtutorial.tables.records.BookRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * jooqtutorial.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("KEY_author_PRIMARY"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<AuthorBookRecord> KEY_AUTHOR_BOOK_PRIMARY = Internal.createUniqueKey(AuthorBook.AUTHOR_BOOK, DSL.name("KEY_author_book_PRIMARY"), new TableField[] { AuthorBook.AUTHOR_BOOK.AUTHOR_ID, AuthorBook.AUTHOR_BOOK.BOOK_ID }, true);
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, DSL.name("KEY_book_PRIMARY"), new TableField[] { Book.BOOK.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AuthorBookRecord, AuthorRecord> FK_AB_AUTHOR = Internal.createForeignKey(AuthorBook.AUTHOR_BOOK, DSL.name("fk_ab_author"), new TableField[] { AuthorBook.AUTHOR_BOOK.AUTHOR_ID }, Keys.KEY_AUTHOR_PRIMARY, new TableField[] { Author.AUTHOR.ID }, true);
    public static final ForeignKey<AuthorBookRecord, BookRecord> FK_AB_BOOK = Internal.createForeignKey(AuthorBook.AUTHOR_BOOK, DSL.name("fk_ab_book"), new TableField[] { AuthorBook.AUTHOR_BOOK.BOOK_ID }, Keys.KEY_BOOK_PRIMARY, new TableField[] { Book.BOOK.ID }, true);
}
